// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -source=main.go -destination=mock.go -package=enginectl
//

// Package enginectl is a generated GoMock package.
package enginectl

import (
	reflect "reflect"

	model "github.com/enuesaa/cywagon/internal/service/model"
	gomock "go.uber.org/mock/gomock"
)

// MockEngineCtl is a mock of EngineCtl interface.
type MockEngineCtl struct {
	ctrl     *gomock.Controller
	recorder *MockEngineCtlMockRecorder
	isgomock struct{}
}

// MockEngineCtlMockRecorder is the mock recorder for MockEngineCtl.
type MockEngineCtlMockRecorder struct {
	mock *MockEngineCtl
}

// NewMockEngineCtl creates a new mock instance.
func NewMockEngineCtl(ctrl *gomock.Controller) *MockEngineCtl {
	mock := &MockEngineCtl{ctrl: ctrl}
	mock.recorder = &MockEngineCtlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngineCtl) EXPECT() *MockEngineCtlMockRecorder {
	return m.recorder
}

// PrintBanner mocks base method.
func (m *MockEngineCtl) PrintBanner(confs []model.Conf) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintBanner", confs)
}

// PrintBanner indicates an expected call of PrintBanner.
func (mr *MockEngineCtlMockRecorder) PrintBanner(confs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintBanner", reflect.TypeOf((*MockEngineCtl)(nil).PrintBanner), confs)
}

// Serve mocks base method.
func (m *MockEngineCtl) Serve(confs []model.Conf) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serve", confs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Serve indicates an expected call of Serve.
func (mr *MockEngineCtlMockRecorder) Serve(confs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockEngineCtl)(nil).Serve), confs)
}

// StartHealthCheck mocks base method.
func (m *MockEngineCtl) StartHealthCheck(confs []model.Conf) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartHealthCheck", confs)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartHealthCheck indicates an expected call of StartHealthCheck.
func (mr *MockEngineCtlMockRecorder) StartHealthCheck(confs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartHealthCheck", reflect.TypeOf((*MockEngineCtl)(nil).StartHealthCheck), confs)
}

// StartUp mocks base method.
func (m *MockEngineCtl) StartUp(confs []model.Conf) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartUp", confs)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartUp indicates an expected call of StartUp.
func (mr *MockEngineCtlMockRecorder) StartUp(confs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartUp", reflect.TypeOf((*MockEngineCtl)(nil).StartUp), confs)
}

// ValidateConfs mocks base method.
func (m *MockEngineCtl) ValidateConfs(confs []model.Conf) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfs", confs)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateConfs indicates an expected call of ValidateConfs.
func (mr *MockEngineCtlMockRecorder) ValidateConfs(confs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfs", reflect.TypeOf((*MockEngineCtl)(nil).ValidateConfs), confs)
}
