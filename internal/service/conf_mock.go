// Code generated by MockGen. DO NOT EDIT.
// Source: conf.go
//
// Generated by this command:
//
//	mockgen -source=conf.go -destination=conf_mock.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	model "github.com/enuesaa/cywagon/internal/service/model"
	gomock "go.uber.org/mock/gomock"
)

// MockConfServicer is a mock of ConfServicer interface.
type MockConfServicer struct {
	ctrl     *gomock.Controller
	recorder *MockConfServicerMockRecorder
	isgomock struct{}
}

// MockConfServicerMockRecorder is the mock recorder for MockConfServicer.
type MockConfServicerMockRecorder struct {
	mock *MockConfServicer
}

// NewMockConfServicer creates a new mock instance.
func NewMockConfServicer(ctrl *gomock.Controller) *MockConfServicer {
	mock := &MockConfServicer{ctrl: ctrl}
	mock.recorder = &MockConfServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfServicer) EXPECT() *MockConfServicerMockRecorder {
	return m.recorder
}

// IsConfPath mocks base method.
func (m *MockConfServicer) IsConfPath(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConfPath", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConfPath indicates an expected call of IsConfPath.
func (mr *MockConfServicerMockRecorder) IsConfPath(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConfPath", reflect.TypeOf((*MockConfServicer)(nil).IsConfPath), path)
}

// List mocks base method.
func (m *MockConfServicer) List(search []string) ([]model.Conf, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", search)
	ret0, _ := ret[0].([]model.Conf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockConfServicerMockRecorder) List(search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockConfServicer)(nil).List), search)
}

// ListConfPaths mocks base method.
func (m *MockConfServicer) ListConfPaths(search []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfPaths", search)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfPaths indicates an expected call of ListConfPaths.
func (mr *MockConfServicerMockRecorder) ListConfPaths(search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfPaths", reflect.TypeOf((*MockConfServicer)(nil).ListConfPaths), search)
}

// Read mocks base method.
func (m *MockConfServicer) Read(path string) (model.Conf, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", path)
	ret0, _ := ret[0].(model.Conf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockConfServicerMockRecorder) Read(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockConfServicer)(nil).Read), path)
}

// Validate mocks base method.
func (m *MockConfServicer) Validate(conf model.Conf) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", conf)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockConfServicerMockRecorder) Validate(conf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockConfServicer)(nil).Validate), conf)
}
