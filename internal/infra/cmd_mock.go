// Code generated by MockGen. DO NOT EDIT.
// Source: cmd.go
//
// Generated by this command:
//
//	mockgen -source=cmd.go -destination=cmd_mock.go -package=infra
//

// Package infra is a generated GoMock package.
package infra

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCmdInterface is a mock of CmdInterface interface.
type MockCmdInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCmdInterfaceMockRecorder
	isgomock struct{}
}

// MockCmdInterfaceMockRecorder is the mock recorder for MockCmdInterface.
type MockCmdInterfaceMockRecorder struct {
	mock *MockCmdInterface
}

// NewMockCmdInterface creates a new mock instance.
func NewMockCmdInterface(ctrl *gomock.Controller) *MockCmdInterface {
	mock := &MockCmdInterface{ctrl: ctrl}
	mock.recorder = &MockCmdInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCmdInterface) EXPECT() *MockCmdInterfaceMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockCmdInterface) Start(workdir, command string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", workdir, command)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockCmdInterfaceMockRecorder) Start(workdir, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCmdInterface)(nil).Start), workdir, command)
}
