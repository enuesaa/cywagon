// Code generated by MockGen. DO NOT EDIT.
// Source: log.go
//
// Generated by this command:
//
//	mockgen -source=log.go -destination=log_mock.go -package=infra
//

// Package infra is a generated GoMock package.
package infra

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLogInterface is a mock of LogInterface interface.
type MockLogInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLogInterfaceMockRecorder
	isgomock struct{}
}

// MockLogInterfaceMockRecorder is the mock recorder for MockLogInterface.
type MockLogInterfaceMockRecorder struct {
	mock *MockLogInterface
}

// NewMockLogInterface creates a new mock instance.
func NewMockLogInterface(ctrl *gomock.Controller) *MockLogInterface {
	mock := &MockLogInterface{ctrl: ctrl}
	mock.recorder = &MockLogInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogInterface) EXPECT() *MockLogInterfaceMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockLogInterface) Error(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", err)
}

// Error indicates an expected call of Error.
func (mr *MockLogInterfaceMockRecorder) Error(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogInterface)(nil).Error), err)
}

// Info mocks base method.
func (m *MockLogInterface) Info(format string, a ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLogInterfaceMockRecorder) Info(format any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogInterface)(nil).Info), varargs...)
}

// Pprint mocks base method.
func (m *MockLogInterface) Pprint(a ...any) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	m.ctrl.Call(m, "Pprint", varargs...)
}

// Pprint indicates an expected call of Pprint.
func (mr *MockLogInterfaceMockRecorder) Pprint(a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pprint", reflect.TypeOf((*MockLogInterface)(nil).Pprint), a...)
}
