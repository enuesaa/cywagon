// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -source=main.go -destination=mock.go -package=libfetch
//

// Package libfetch is a generated GoMock package.
package libfetch

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFetcherInterface is a mock of FetcherInterface interface.
type MockFetcherInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherInterfaceMockRecorder
	isgomock struct{}
}

// MockFetcherInterfaceMockRecorder is the mock recorder for MockFetcherInterface.
type MockFetcherInterfaceMockRecorder struct {
	mock *MockFetcherInterface
}

// NewMockFetcherInterface creates a new mock instance.
func NewMockFetcherInterface(ctrl *gomock.Controller) *MockFetcherInterface {
	mock := &MockFetcherInterface{ctrl: ctrl}
	mock.recorder = &MockFetcherInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetcherInterface) EXPECT() *MockFetcherInterfaceMockRecorder {
	return m.recorder
}

// CheckHTTP mocks base method.
func (m *MockFetcherInterface) CheckHTTP(url, matcher string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHTTP", url, matcher)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckHTTP indicates an expected call of CheckHTTP.
func (mr *MockFetcherInterfaceMockRecorder) CheckHTTP(url, matcher any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHTTP", reflect.TypeOf((*MockFetcherInterface)(nil).CheckHTTP), url, matcher)
}

// CheckTCP mocks base method.
func (m *MockFetcherInterface) CheckTCP(address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTCP", address)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckTCP indicates an expected call of CheckTCP.
func (mr *MockFetcherInterfaceMockRecorder) CheckTCP(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTCP", reflect.TypeOf((*MockFetcherInterface)(nil).CheckTCP), address)
}

// ConnectTCP mocks base method.
func (m *MockFetcherInterface) ConnectTCP(address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectTCP", address)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectTCP indicates an expected call of ConnectTCP.
func (mr *MockFetcherInterfaceMockRecorder) ConnectTCP(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectTCP", reflect.TypeOf((*MockFetcherInterface)(nil).ConnectTCP), address)
}

// FetchHTTP mocks base method.
func (m *MockFetcherInterface) FetchHTTP(url string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchHTTP", url)
	ret0, _ := ret[0].(string)
	return ret0
}

// FetchHTTP indicates an expected call of FetchHTTP.
func (mr *MockFetcherInterfaceMockRecorder) FetchHTTP(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchHTTP", reflect.TypeOf((*MockFetcherInterface)(nil).FetchHTTP), url)
}
